package main

import (
    "fmt"
    "log"
    "net/http"
    "os"
    "io"
    "golang.org/x/oauth2"
    "golang.org/x/oauth2/google"
    "github.com/gin-gonic/gin"
    "github.com/gorilla/sessions"
)

var (
    googleOauthConfig = oauth2.Config{
        RedirectURL:  "http://localhost:8080/auth/callback",
        Scopes:       []string{"email"},
        Endpoint:     google.Endpoint,
    )
    oauthStateString = "random"
    store            = sessions.NewCookieStore([]byte("random-secret"))
)

type Note struct {
    Title   string json:"title"
    Content string json:"content"
}

var notes []Note

func main() {
    r := gin.Default()

    // Static file handler for the upload folder
    r.Static("/uploads", "./uploads")

    // Route for login
    r.GET("/auth/login", googleLogin)

    // OAuth callback handler
    r.GET("/auth/callback", googleCallback)

    // File upload page
    r.GET("/upload", uploadPage)

    // Handle file upload
    r.POST("/upload", uploadFile)

    // Create new note
    r.POST("/note", createNote)

    // Start the server
    r.Run(":8080")
}

// Google OAuth login
func googleLogin(c *gin.Context) {
    url := googleOauthConfig.AuthCodeURL(oauthStateString, oauth2.AccessTypeOffline)
    c.Redirect(http.StatusFound, url)
}

// Google OAuth callback
func googleCallback(c *gin.Context) {
    code := c.DefaultQuery("code", "")
    state := c.DefaultQuery("state", "")

    if state != oauthStateString {
        fmt.Println("Invalid OAuth state")
        c.JSON(http.StatusBadReq
